/*!
 * module deps
 */

const stream = require('stream')
const util = require('util')

/*!
 * globals
 */

const Readable = stream.Readable

/**
 * FirebaseEventStream constructor
 * created a Readable stream that listen to firebase events and stream children
 *
 * @param {Object} opts
 */

function FirebaseEventStream(ref, opts) {
  Readable.call(this, { objectMode: true })
  this.ref = ref
  this._destroyed = null
  this.subscriptions = []
  this.events = (opts || {}).events || [
    'child_added',
    'child_removed',
    'child_changed'
  ]
}

/*!
 * extend readable
 */

util.inherits(FirebaseEventStream, Readable)

/**
 * FirebaseEventStream internal _read
 * @see http://nodejs.org/api/stream.html#stream_readable_read_size_1
 */

FirebaseEventStream.prototype._read = function() {
  const stream = this

  // Limit _read to call only once per response
  if (this.listening) return
  this.listening = true

  function childEvent(ev) {
    return function(child) {
      stream.push({ event: ev, child: child })
    }
  }

  this.subscriptions = this.events.map(function(ev) {
    const callback = stream.ref.on(ev, childEvent(ev))
    return { event: ev, callback: callback }
  })
}

/**
 * destroy stream
 * @see http://nodejs.org/api/stream.html#stream_readable_read_size_1
 */

FirebaseEventStream.prototype.destroy = function() {
  if (this._destroyed) return

  this.subscriptions.forEach(function(subscription) {
    this.ref.off(subscription.event, subscription.callback)
  }, this)

  this._destroyed = true
  this.emit('close')
}

/*!
 * exports
 */

module.exports.FirebaseEventStream = FirebaseEventStream
module.exports = function firebaseEventStream(ref, opts) {
  return new FirebaseEventStream(ref, opts)
}
