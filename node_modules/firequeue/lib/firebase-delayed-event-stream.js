/*!
 * module deps
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

exports['default'] = firebaseDelayedEventStream;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _stream = require('stream');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

/*!
 * module globals
 */

var log = (0, _debug2['default'])('firequeue:delayed-event');
var noop = function noop() {};
var maxTimeout = Math.pow(2, 31) - 1;
var atMaturity = function atMaturity(snapshot) {
  return snapshot.getPriority() - Date.now();
};

/**
 * Read stream
 * that watch child nodes added with a Date priority
 * and push these nodes into the stream once they arrive at maturity
 * (ie when priority = now)
 */

var FirebaseDelayedEventStream = (function (_Readable) {
  _inherits(FirebaseDelayedEventStream, _Readable);

  function FirebaseDelayedEventStream(query) {
    var maturity = arguments.length <= 1 || arguments[1] === undefined ? atMaturity : arguments[1];

    _classCallCheck(this, FirebaseDelayedEventStream);

    _get(Object.getPrototypeOf(FirebaseDelayedEventStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.query = query;
    this._destroyed = false;
    this.maturity = maturity;

    // watch first 10 jobs to let firebase cache data internally
    var readFirstTen = this.query.limitToFirst(10);
    this.subscriptions = [{
      query: readFirstTen,
      callback: readFirstTen.on('value', noop)
    }];
  }

  /**
   * firebaseDelayedEventStream
   *
   * @param  {FQuery} query
   */

  _createClass(FirebaseDelayedEventStream, [{
    key: '_read',
    value: function _read() {
      var _this = this;

      if (this.reading) return;
      this.reading = true;

      // watch first job
      var _watch = null;
      var readFirstQuery = this.query.limitToFirst(1);
      var readFirstCallback = function readFirstCallback(snapshots) {

        var snapshot = snapshots.firstChild();

        // clear prev timeout
        clearTimeout(_watch);

        // exit early if no snapshots
        if (!snapshot) return;

        var pushWithDelay = function pushWithDelay(time) {
          var timeout = Math.min(time, maxTimeout);

          if (timeout > 0) {
            _watch = setTimeout(pushWithDelay, timeout, time - timeout);
          } else {
            log('push delayed ' + snapshot.key());
            _this.push(snapshot);
          }
        };

        // update job on maturity
        var time = _this.maturity(snapshot);
        log('next delayed: ' + snapshot.key() + ' in ' + (0, _ms2['default'])(time));
        pushWithDelay(time);
      };

      // subscribe to value
      this.subscriptions.push({
        query: readFirstQuery,
        callback: readFirstQuery.on('value', readFirstCallback)
      });
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (this._destroyed) return;
      this._destroyed = true;
      this.subscriptions.forEach(function (_ref) {
        var query = _ref.query;
        var callback = _ref.callback;

        query.off('value', callback);
      });
      this.emit('close');
    }
  }]);

  return FirebaseDelayedEventStream;
})(_stream.Readable);

exports.FirebaseDelayedEventStream = FirebaseDelayedEventStream;

function firebaseDelayedEventStream(query, maturity) {
  return new FirebaseDelayedEventStream(query, maturity);
}