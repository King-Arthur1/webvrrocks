/*!
 * module deps
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _domain = require('domain');

var _domain2 = _interopRequireDefault(_domain);

var _stream = require('stream');

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

function defer() {
  var resolve = undefined,
      reject = undefined;
  var promise = new Promise(function (_resolve, _reject) {
    resolve = _resolve;
    reject = _reject;
  });

  return { promise: promise, resolve: resolve, reject: reject };
}

/**
 * LogStream
 *
 * transform stream that log data before passing it down the stream
 */

var LogStream = (function (_Transform) {
  _inherits(LogStream, _Transform);

  function LogStream() {
    var logfn = arguments.length <= 0 || arguments[0] === undefined ? function (x) {
      return console.log(x);
    } : arguments[0];

    _classCallCheck(this, LogStream);

    _get(Object.getPrototypeOf(LogStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.log = logfn;
  }

  /**
   * FromArrayStream
   *
   * Readable stream that transdorm an array into stream
   */

  _createClass(LogStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      this.log(chunk);
      callback(null, chunk);
    }
  }]);

  return LogStream;
})(_stream.Transform);

var FromArrayStream = (function (_Readable) {
  _inherits(FromArrayStream, _Readable);

  function FromArrayStream() {
    var values = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    _classCallCheck(this, FromArrayStream);

    _get(Object.getPrototypeOf(FromArrayStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.values = values;
  }

  /**
   * ToArrayStream
   *
   * Transform stream that buffered event into an array
   */

  _createClass(FromArrayStream, [{
    key: '_read',
    value: function _read() {
      var _this = this;

      this.values.forEach(function (v) {
        return _this.push(v);
      });
      this.push(null);
    }
  }]);

  return FromArrayStream;
})(_stream.Readable);

var ToArrayStream = (function (_Transform2) {
  _inherits(ToArrayStream, _Transform2);

  function ToArrayStream() {
    _classCallCheck(this, ToArrayStream);

    _get(Object.getPrototypeOf(ToArrayStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this._buffer = [];
    this._deferred = defer();
  }

  /**
   * ToObjectStream
   *
   * Transform stream that buffered event into an object
   */

  _createClass(ToArrayStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, next) {
      this._buffer.push(chunk);
      next();
    }
  }, {
    key: '_flush',
    value: function _flush() {
      this._deferred.resolve(this._buffer);
    }
  }, {
    key: 'promise',
    value: function promise() {
      return this._deferred.promise;
    }
  }, {
    key: 'then',
    value: function then(p) {
      return this._deferred.promise.then(p);
    }
  }]);

  return ToArrayStream;
})(_stream.Transform);

var ToObjectStream = (function (_Transform3) {
  _inherits(ToObjectStream, _Transform3);

  function ToObjectStream() {
    _classCallCheck(this, ToObjectStream);

    _get(Object.getPrototypeOf(ToObjectStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this._buffer = {};
    this._deferred = defer();
  }

  /**
   * ReadAsyncStream
   */

  _createClass(ToObjectStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, next) {
      Object.assign(this._buffer, chunk);
      next();
    }
  }, {
    key: '_flush',
    value: function _flush() {
      this._deferred.resolve(this._buffer);
    }
  }, {
    key: 'promise',
    value: function promise() {
      return this._deferred.promise;
    }
  }, {
    key: 'then',
    value: function then(p) {
      return this._deferred.promise.then(p);
    }
  }]);

  return ToObjectStream;
})(_stream.Transform);

var ReadAsyncStream = (function (_Readable2) {
  _inherits(ReadAsyncStream, _Readable2);

  function ReadAsyncStream(fn) {
    _classCallCheck(this, ReadAsyncStream);

    _get(Object.getPrototypeOf(ReadAsyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = _co2['default'].wrap(fn);
  }

  /**
   * MapSyncStream
   */

  _createClass(ReadAsyncStream, [{
    key: '_read',
    value: function _read() {
      var _this2 = this;

      if (this.reading) return;
      this.reading = true;

      this.fn().then(function (val) {
        if (val) _this2.push(val);
        _this2.push(null);
      })['catch'](function (err) {
        return setImmediate(function () {
          return _this2.emit('error', err);
        });
      });
    }
  }]);

  return ReadAsyncStream;
})(_stream.Readable);

var MapSyncStream = (function (_Transform4) {
  _inherits(MapSyncStream, _Transform4);

  function MapSyncStream(fn) {
    _classCallCheck(this, MapSyncStream);

    _get(Object.getPrototypeOf(MapSyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = fn;
  }

  /**
   * MapAsyncStream
   */

  _createClass(MapSyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      callback(null, this.fn(chunk));
    }
  }]);

  return MapSyncStream;
})(_stream.Transform);

var MapAsyncStream = (function (_Transform5) {
  _inherits(MapAsyncStream, _Transform5);

  function MapAsyncStream(fn) {
    _classCallCheck(this, MapAsyncStream);

    _get(Object.getPrototypeOf(MapAsyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = _co2['default'].wrap(fn);
  }

  /**
   * ThroughSyncStream
   */

  _createClass(MapAsyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      this.fn(chunk).then(function (val) {
        callback(null, val);
      })['catch'](function (err) {
        return setImmediate(function () {
          return callback(err);
        });
      });
    }
  }]);

  return MapAsyncStream;
})(_stream.Transform);

var ThroughSyncStream = (function (_Transform6) {
  _inherits(ThroughSyncStream, _Transform6);

  function ThroughSyncStream(fn) {
    _classCallCheck(this, ThroughSyncStream);

    _get(Object.getPrototypeOf(ThroughSyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = fn.bind(this);
  }

  /**
   * ThroughAsyncStream
   */

  _createClass(ThroughSyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      this.fn(chunk);
      callback();
    }
  }]);

  return ThroughSyncStream;
})(_stream.Transform);

var ThroughAsyncStream = (function (_Transform7) {
  _inherits(ThroughAsyncStream, _Transform7);

  function ThroughAsyncStream(fn) {
    _classCallCheck(this, ThroughAsyncStream);

    _get(Object.getPrototypeOf(ThroughAsyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = _co2['default'].wrap(fn.bind(this));
  }

  /**
   * concat streams
   *
   * @return {Stream}
   */

  _createClass(ThroughAsyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      this.fn(chunk).then(function () {
        return callback();
      })['catch'](function (err) {
        return setImmediate(function () {
          return callback(err);
        });
      });
    }
  }]);

  return ThroughAsyncStream;
})(_stream.Transform);

var ConcatStream = (function (_Readable3) {
  _inherits(ConcatStream, _Readable3);

  function ConcatStream(streams) {
    _classCallCheck(this, ConcatStream);

    _get(Object.getPrototypeOf(ConcatStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.streams = streams;
    this.endCount = 0;
  }

  /**
   * FilterSyncStream
   */

  _createClass(ConcatStream, [{
    key: '_read',
    value: function _read() {
      var _this3 = this;

      if (this.resumed) return;
      this.resumed = true;
      this.resume();

      this.streams.forEach(function (stream) {
        stream.on('data', function (data) {
          _this3.push(data);
        });
        stream.on('error', function (err) {
          return _this3.emit('error', err);
        });
        stream.on('end', function () {
          if (++_this3.endCount === _this3.streams.length) {
            _this3.push(null);
          }
        });
      });
    }
  }]);

  return ConcatStream;
})(_stream.Readable);

var FilterSyncStream = (function (_Transform8) {
  _inherits(FilterSyncStream, _Transform8);

  function FilterSyncStream(fn) {
    _classCallCheck(this, FilterSyncStream);

    _get(Object.getPrototypeOf(FilterSyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = fn;
  }

  /**
   * FilterAsyncStream
   */

  _createClass(FilterSyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      if (this.fn(chunk)) this.push(chunk);
      callback();
    }
  }]);

  return FilterSyncStream;
})(_stream.Transform);

var FilterAsyncStream = (function (_Transform9) {
  _inherits(FilterAsyncStream, _Transform9);

  function FilterAsyncStream(fn) {
    _classCallCheck(this, FilterAsyncStream);

    _get(Object.getPrototypeOf(FilterAsyncStream.prototype), 'constructor', this).call(this, { objectMode: true });
    this.fn = _co2['default'].wrap(fn);
  }

  /*!
   * module export
   */

  _createClass(FilterAsyncStream, [{
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      var _this4 = this;

      this.fn(chunk).then(function (val) {
        if (val) _this4.push(chunk);
        callback();
      })['catch'](function (err) {
        return setImmediate(function () {
          return callback(err);
        });
      });
    }
  }, {
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      if (this.fn(chunk)) this.push(chunk);
      callback();
    }
  }]);

  return FilterAsyncStream;
})(_stream.Transform);

exports['default'] = {
  concat: function concat(arr) {
    if (!Array.isArray(arr)) arr = [].slice.call(arguments);
    return new ConcatStream(arr);
  },
  log: function log(fn) {
    return new LogStream(fn);
  },
  fromArray: function fromArray(arr) {
    return new FromArrayStream(arr);
  },
  toArray: function toArray() {
    return new ToArrayStream();
  },
  toObject: function toObject() {
    return new ToObjectStream();
  },
  readAsync: function readAsync(fn) {
    return new ReadAsyncStream(fn);
  },
  throughSync: function throughSync(fn) {
    return new ThroughSyncStream(fn);
  },
  throughAsync: function throughAsync(fn) {
    return new ThroughAsyncStream(fn);
  },
  filterSync: function filterSync(fn) {
    return new FilterSyncStream(fn);
  },
  filterAsync: function filterAsync(fn) {
    return new FilterAsyncStream(fn);
  },
  mapSync: function mapSync(fn) {
    return new MapSyncStream(fn);
  },
  mapAsync: function mapAsync(fn) {
    return new MapAsyncStream(fn);
  },
  consume: function consume(createStream) {
    var d = _domain2['default'].create();
    var stream = d.bind(createStream)();

    // re-emit error from domain
    d.on('error', function (err) {
      setImmediate(function () {
        return stream.emit('error', err);
      });
    });

    if (stream.readable) stream.resume();
    return stream;
  },
  toPromise: function toPromise(stream) {
    return new Promise(function (fulfill, reject) {
      stream.once('error', reject);
      stream.once('end', fulfill);
      stream.once('finish', fulfill);
      if (stream.readable) stream.resume();
    });
  }
};
module.exports = exports['default'];